[gcode_macro NOZZLE_PARK]
variable_park_x: 237	
variable_park_y: 355
variable_purge_side: 'left' ; Side the purge toilet is on in relation to the Nozzle park. 'left' or 'right'
gcode:
  SAVE_GCODE_STATE NAME=__NOZZLE_PARK 
  {% set X_POS = printer.toolhead.position.x %}
  {% set Y_POS = printer.toolhead.position.y %}
  {% if purge_side == 'left' %}
	{% set  prepark_x = (park_x + 20) %} 
  {% elif purge_side == 'right' %}
	{% set  prepark_x = (park_x - 20) %}
  {% endif %}
  {% set prepark_y = (park_y - 20) %}
  
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    {% if Y_POS > prepark_y %}
      G1 Y{prepark_y} F30000
    {% endif %}
    G1 X{prepark_x} Y{prepark_y} F30000
    G1 Y{park_y} F30000
    G1 X{park_x} F30000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}   
  RESTORE_GCODE_STATE NAME=__NOZZLE_PARK  


[gcode_macro GO_TO_PURGE]
gcode:
  SAVE_GCODE_STATE NAME=__GO_TO_PURGE
  {% set X_POS = printer.toolhead.position.x %}
  {% set Y_POS = printer.toolhead.position.y %}
  {% set park_x = printer["gcode_macro NOZZLE_PARK"].park_x %}
  {% set park_y = printer["gcode_macro NOZZLE_PARK"].park_y %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if printer["gcode_macro NOZZLE_PARK"].purge_side == 'left' %}
	{% set purge_x = (park_x - 45) %} 
  {% elif printer["gcode_macro NOZZLE_PARK"].purge_side == 'right' %}
	{% set purge_x = (park_x + 45) %}
  {% endif %}
  {% set purge_y = park_y %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G90
    {% if not (X_POS == park_x and Y_POS == park_y) %}
      NOZZLE_PARK
    {% endif %}
    G90
    G1 X{purge_x} Y{purge_y} F25000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 
  RESTORE_GCODE_STATE NAME=__GO_TO_PURGE

[gcode_macro PURGE_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=__PURGE_FILAMENT 
  {% set temp = params.TEMP|default(260)|float %}
  {% set length = params.LENGTH|default(50)|float %}
  {% set numberofpurges = (length / 50) | round(0, 'ceil') | int %} ; Divide purge length requested into 50mm chunks, rounding up.
  {% set OriginalTemp = printer['extruder'].target %}
  {% set OriginalFan = (printer.fan.speed * 255) | int  %}
  {% set OriginalState = printer.print_stats.state %}
  {% set park_x = printer["gcode_macro NOZZLE_PARK"].park_x %}
  {% set park_y = printer["gcode_macro NOZZLE_PARK"].park_y %}
  {% if printer["gcode_macro NOZZLE_PARK"].purge_side == 'left' %}
	{% set purge_x = (park_x - 45) %} 
  {% elif printer["gcode_macro NOZZLE_PARK"].purge_side == 'right' %}
	{% set purge_x = (park_x + 45) %}
  {% endif %}
  {% if not 'xyz' in printer.toolhead.homed_axes %}
    { action_raise_error("Must Home Axes First!") }
  {% endif %}
  
  GO_TO_PURGE
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={temp}
  M106 S0 ;Turn off PCF
  G4 P2000 ; wait 2 seconds for fan to spool down
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp}
  {% for step in range(numberofpurges) %}
    G90   ;Absolute Mode
    G1 X{purge_x} F25000
    G92 E0  ;Reset Extruder
    M83
    G1 E50 F300
    M400
	M106 S255 ;Turn on PCF
    G91
    G1 X15 F10000
    G4 P3000 ;wait 3 seconds
	M106 S0 ;Turn off PCF
	G4 P1000 ;wait 1 second for fan to spool down
    G90
    G1 X{park_x} F25000
  {% endfor %}
  M106 S{OriginalFan} #PCF to original speed
  M104 S{OriginalTemp} #Hotend to original temp
  RESTORE_GCODE_STATE NAME=__PURGE_FILAMENT 